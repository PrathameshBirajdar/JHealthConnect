package com.jhealthconnect.controller;

import com.jhealthconnect.entity.*;
import com.jhealthconnect.service.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpSession;
import java.util.List;

@Controller
public class HomeController {

    @Autowired
    private DoctorService doctorService;
    
    @Autowired
    private InsuranceService insuranceService;
    
    @Autowired
    private AppointmentService appointmentService;
    
    @Autowired
    private UserService userService;

    @GetMapping("/")
    public String redirectToLogin() {
        return "redirect:/login";
    }

    @GetMapping("/login")
    public String loginPage() {
        return "login";
    }

    @PostMapping("/login")
    public String processLogin(@RequestParam String email,
                              @RequestParam String password,
                              @RequestParam String userType,
                              HttpSession session,
                              Model model) {
        try {
            User user = userService.authenticate(email, password, userType);
            if (user != null) {
                session.setAttribute("userId", user.getId());
                session.setAttribute("userName", user.getName());
                session.setAttribute("userEmail", user.getEmail());
                session.setAttribute("userType", user.getUserType());
                
                if ("ADMIN".equals(user.getUserType())) {
                    return "redirect:/admin/dashboard";
                } else {
                    return "redirect:/home";
                }
            } else {
                model.addAttribute("error", "Invalid credentials");
                return "login";
            }
        } catch (Exception e) {
            model.addAttribute("error", "Login failed: " + e.getMessage());
            return "login";
        }
    }

    @GetMapping("/home")
    public String homePage(HttpSession session, Model model) {
        if (session.getAttribute("userId") == null) {
            return "redirect:/login";
        }
        
        try {
            // Get top 10 doctors
            List<Doctor> topDoctors = doctorService.getTopDoctors(10);
            model.addAttribute("topDoctors", topDoctors);
            
            // Get top 10 insurance companies
            List<InsuranceCompany> topInsurance = insuranceService.getTopInsuranceCompanies(10);
            model.addAttribute("topInsurance", topInsurance);
            
            // Get pending appointments for current user
            Long userId = (Long) session.getAttribute("userId");
            List<Appointment> pendingAppointments = appointmentService.getPendingAppointmentsByUser(userId);
            model.addAttribute("pendingAppointments", pendingAppointments);
            
            // Set page attributes
            model.addAttribute("currentPage", "home");
            model.addAttribute("pageTitle", "Dashboard");
            
            return "home";
        } catch (Exception e) {
            model.addAttribute("error", "Error loading dashboard: " + e.getMessage());
            return "error";
        }
    }

    @GetMapping("/doctor-details/{id}")
    public String doctorDetails(@PathVariable Long id, HttpSession session, Model model) {
        if (session.getAttribute("userId") == null) {
            return "redirect:/login";
        }
        
        try {
            Doctor doctor = doctorService.getDoctorById(id);
            if (doctor == null) {
                return "redirect:/doctors?error=Doctor not found";
            }
            
            model.addAttribute("doctor", doctor);
            model.addAttribute("currentPage", "doctor-details");
            model.addAttribute("pageTitle", "Dr. " + doctor.getName());
            
            return "doctor_details";
        } catch (Exception e) {
            model.addAttribute("error", "Error loading doctor details: " + e.getMessage());
            return "error";
        }
    }

    @GetMapping("/insurance-details/{id}")
    public String insuranceDetails(@PathVariable Long id, HttpSession session, Model model) {
        if (session.getAttribute("userId") == null) {
            return "redirect:/login";
        }
        
        try {
            InsuranceCompany insurance = insuranceService.getInsuranceById(id);
            if (insurance == null) {
                return "redirect:/insurance?error=Insurance company not found";
            }
            
            model.addAttribute("insurance", insurance);
            model.addAttribute("currentPage", "insurance-details");
            model.addAttribute("pageTitle", insurance.getName());
            
            return "insurance_details";
        } catch (Exception e) {
            model.addAttribute("error", "Error loading insurance details: " + e.getMessage());
            return "error";
        }
    }

    @GetMapping("/appointment-details/{id}")
    public String appointmentDetails(@PathVariable Long id, HttpSession session, Model model) {
        if (session.getAttribute("userId") == null) {
            return "redirect:/login";
        }
        
        try {
            Long userId = (Long) session.getAttribute("userId");
            Appointment appointment = appointmentService.getAppointmentById(id);
            
            // Check if appointment belongs to current user (for security)
            if (appointment == null || !appointment.getUser().getId().equals(userId)) {
                return "redirect:/appointments?error=Appointment not found";
            }
            
            model.addAttribute("appointment", appointment);
            model.addAttribute("currentPage", "appointment-details");
            model.addAttribute("pageTitle", "Appointment Details");
            
            return "appointment_details";
        } catch (Exception e) {
            model.addAttribute("error", "Error loading appointment details: " + e.getMessage());
            return "error";
        }
    }

    @GetMapping("/doctors")
    public String doctorsPage(HttpSession session, Model model,
                             @RequestParam(required = false) String specialization,
                             @RequestParam(required = false) String location,
                             @RequestParam(required = false) String search) {
        if (session.getAttribute("userId") == null) {
            return "redirect:/login";
        }
        
        try {
            List<Doctor> doctors;
            if (search != null && !search.trim().isEmpty()) {
                doctors = doctorService.searchDoctors(search);
            } else if (specialization != null || location != null) {
                doctors = doctorService.filterDoctors(specialization, location);
            } else {
                doctors = doctorService.getAllDoctors();
            }
            
            model.addAttribute("doctors", doctors);
            model.addAttribute("specializations", doctorService.getAllSpecializations());
            model.addAttribute("locations", doctorService.getAllLocations());
            model.addAttribute("currentPage", "doctors");
            model.addAttribute("pageTitle", "Find Doctors");
            
            return "doctors";
        } catch (Exception e) {
            model.addAttribute("error", "Error loading doctors: " + e.getMessage());
            return "error";
        }
    }

    @GetMapping("/appointments")
    public String appointmentsPage(HttpSession session, Model model) {
        if (session.getAttribute("userId") == null) {
            return "redirect:/login";
        }
        
        try {
            Long userId = (Long) session.getAttribute("userId");
            List<Appointment> appointments = appointmentService.getAppointmentsByUser(userId);
            
            model.addAttribute("appointments", appointments);
            model.addAttribute("currentPage", "appointments");
            model.addAttribute("pageTitle", "My Appointments");
            
            return "appointments";
        } catch (Exception e) {
            model.addAttribute("error", "Error loading appointments: " + e.getMessage());
            return "error";
        }
    }

    @GetMapping("/book-appointment")
    public String bookAppointmentPage(HttpSession session, Model model,
                                     @RequestParam(required = false) Long doctorId) {
        if (session.getAttribute("userId") == null) {
            return "redirect:/login";
        }
        
        try {
            List<Doctor> doctors = doctorService.getAvailableDoctors();
            model.addAttribute("doctors", doctors);
            
            if (doctorId != null) {
                Doctor selectedDoctor = doctorService.getDoctorById(doctorId);
                model.addAttribute("selectedDoctor", selectedDoctor);
            }
            
            model.addAttribute("currentPage", "book-appointment");
            model.addAttribute("pageTitle", "Book Appointment");
            
            return "appointment_form";
        } catch (Exception e) {
            model.addAttribute("error", "Error loading appointment form: " + e.getMessage());
            return "error";
        }
    }

    @GetMapping("/insurance")
    public String insurancePage(HttpSession session, Model model) {
        if (session.getAttribute("userId") == null) {
            return "redirect:/login";
        }
        
        try {
            List<InsuranceCompany> insuranceCompanies = insuranceService.getAllInsuranceCompanies();
            model.addAttribute("insuranceCompanies", insuranceCompanies);
            model.addAttribute("currentPage", "insurance");
            model.addAttribute("pageTitle", "Insurance Providers");
            
            return "insurance";
        } catch (Exception e) {
            model.addAttribute("error", "Error loading insurance companies: " + e.getMessage());
            return "error";
        }
    }

    @GetMapping("/profile")
    public String profilePage(HttpSession session, Model model) {
        if (session.getAttribute("userId") == null) {
            return "redirect:/login";
        }
        
        try {
            Long userId = (Long) session.getAttribute("userId");
            User user = userService.getUserById(userId);
            
            model.addAttribute("user", user);
            model.addAttribute("currentPage", "profile");
            model.addAttribute("pageTitle", "My Profile");
            
            return "profile";
        } catch (Exception e) {
            model.addAttribute("error", "Error loading profile: " + e.getMessage());
            return "error";
        }
    }

    @GetMapping("/settings")
    public String settingsPage(HttpSession session, Model model) {
        if (session.getAttribute("userId") == null) {
            return "redirect:/login";
        }
        
        model.addAttribute("currentPage", "settings");
        model.addAttribute("pageTitle", "Settings");
        
        return "settings";
    }

    @GetMapping("/help")
    public String helpPage(HttpSession session, Model model) {
        if (session.getAttribute("userId") == null) {
            return "redirect:/login";
        }
        
        model.addAttribute("currentPage", "help");
        model.addAttribute("pageTitle", "Help & Support");
        
        return "help";
    }

    @GetMapping("/logout")
    public String logout(HttpSession session) {
        session.invalidate();
        return "redirect:/login?message=Logged out successfully";
    }
}